rmarkdown=T,
width="80%")
# variables %in% names(selected)
dat <- plot_data %>% select(c("scrambled_upright_percent_reported_adjusted", "phenotype"))
html(describe(dat),
size=80,
rows=30,
cols=80,
rmarkdown=T,
width="80%")
eda(dat)
View(dat)
View(dat)
d0 = dat
# add grouping var
# d0$phenotype <- bl$phenotype
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "mlhr"))
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
# variables %in% names(selected)
dat <- plot_data
html(describe(dat),
size=80,
rows=30,
cols=80,
rmarkdown=T,
width="80%")
eda(dat)
eda <- function(d0) {
# add grouping var
# d0$phenotype <- bl$phenotype
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "mlhr"))
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
p <- ggplot(data = d0_long, aes(x = value, fill = phenotype)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 30) +
facet_wrap(~variable, scales = "free") +
scale_fill_manual(values = c("blue", "steelblue", "orange", "red")) +
theme_minimal() +
labs(x = "Value", y = "Count", title = "Histograms by Variable and Phenotype") +
theme(legend.position = "top")
print(p)
cGroups <- compareGroups(phenotype ~ ., data = d0)
results <- createTable(cGroups, hide.no = "none", show.all = TRUE)  # Adjust parameters as needed
export2md(results)
}
```{r, fig.width = 8, fig.height = 10}
# variables %in% names(selected)
dat <- plot_data
html(describe(dat),
size=80,
rows=30,
cols=80,
rmarkdown=T,
width="80%")
eda(dat)
high_risk_indices <- which(bl$converted == 1)
high_risk_data <- selected[high_risk_indices, ]
selected$ml_highrisk <- 0
selected$ml_highrisk[high_risk_indices] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "converted"
plot_data <- rbind(selected, mlhr)
View(plot_data)
View(plot_data)
View(plot_data)
View(plot_data)
d0 <- plot_data[,c(1,3:25)]
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "converted"))
d0 <- d0 %>% select(c(variables, "phenotype")) %>% filter(phenotype != "chr")
d0 <- d0 %>% filter(phenotype != "chr")
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
#d00 <- d00[!(d00$phenotype == "chr" & d00$converted == 0), ]
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
cGroups <- compareGroups(phenotype ~ ., data = d0)
results <- createTable(cGroups, hide.no = "none", show.all = TRUE)  # Adjust parameters as needed
export2md(results)
p <- ggplot(data = d0_long, aes(x = phenotype, y = value)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free")
p
p <- ggplot(data = d0_long, aes(x = value, fill = phenotype)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 30) +
facet_wrap(~variable, scales = "free") +
scale_fill_manual(values = c("blue", "steelblue", "orange", "red")) +
theme_minimal() +
labs(x = "Value", y = "Count", title = "Histograms by Variable and Phenotype") +
theme(legend.position = "top")
p
p <- ggplot(data = d0_long, aes(x = value, fill = phenotype)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 30) +
facet_wrap(~variable, scales = "free") +
scale_fill_manual(values = c("blue", "steelblue", "red")) +
theme_minimal() +
labs(x = "Value", y = "Count", title = "Histograms by Variable and Phenotype") +
theme(legend.position = "top")
p
selected <- bl %>% select(phenotype,
sips_p_total,
sips_n_total,
sips_d_total,
sips_g_total,
gaf_score_current,gaf_score_1yrago,gfs_current,gfs_low,gfs_high,
gfr_current,gfr_low,gfr_high,
nsipr_avolition,nsipr_asociality,nsipr_anhedonia,nsipr_blunted_affect,
nsipr_alogia, nsipr_ee, nsipr_map,
ends_with("_rating"),
napls_rc_1yr, napls_rc_2yr, sharp_sips_rc
)
selected[, 32:34] <- lapply(selected[, 32:34], as.numeric)
# Create a new column in the 'selected' data frame
selected$ml_highrisk <- 0
# Set 'high_risk' to 1 for the top 20% of subjects with the highest risk
selected$ml_highrisk[high_risk_indices] <- 1
table(selected$ml_highrisk)
# Set 'high_risk' to 1 for the top 20% of subjects with the highest risk
high_risk_indices <- which(predicted_probabilities >= optimal_cutoff2)
selected$ml_highrisk[high_risk_indices] <- 1
table(selected$ml_highrisk)
44/820
calculate_metrics <- function(cutoff, true_labels, predicted_probs) {
predicted_labels <- ifelse(predicted_probs > cutoff, 1, 0)
TP <- sum(predicted_labels == 1 & true_labels == 1)
FP <- sum(predicted_labels == 1 & true_labels == 0)
FN <- sum(predicted_labels == 0 & true_labels == 1)
sensitivity <- TP / (TP + FN)
FDR <- FP / (TP + FP)
return(c(sensitivity = sensitivity, FDR = FDR))
}
true_labels2 <- averaged_data$converted
results <- sapply(cutoffs, calculate_metrics, true_labels = true_labels2, predicted_probs = predicted_probabilities)
sensitivity_values <- results["sensitivity", ]
fdr_values <- results["FDR", ]
scores <- 0.9 * (1 - fdr_values) + 0.1 * sensitivity_values
optimal_cutoff2 <- cutoffs[which.max(scores)]
pred_conversion2 <- ifelse(predicted_probabilities > optimal_cutoff2, 1, 0)
results <- get_stats(pred_conversion2, true_labels)
# Print sensitivity and specificity
cat("Probability Cutoff:", optimal_cutoff2, "\n")
cat("Number of predicted 1's:", sum(pred_conversion2), "\n")
cat("Sensitivity of predicting true converted:", results$sensitivity, "\n")
cat("Specificity of true NC+HSC:", results$specificity, "\n")
high_risk_indices <- which(predicted_probabilities >= optimal_cutoff2)
high_risk_data <- selected[high_risk_indices, ]
selected$ml_highrisk <- 0
selected$ml_highrisk[high_risk_indices] <- 1
table(selected$ml_highrisk)
high_risk_indices <- which(predicted_probabilities >= optimal_cutoff2)
high_risk_data <- selected[high_risk_indices, ]
selected$ml_highrisk <- 0
selected$ml_highrisk[high_risk_indices] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "mlhr"
plot_data <- rbind(selected, mlhr)
eda <- function(d0) {
# add grouping var
# d0$phenotype <- bl$phenotype
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "mlhr"))
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
p <- ggplot(data = d0_long, aes(x = value, fill = phenotype)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 30) +
facet_wrap(~variable, scales = "free") +
scale_fill_manual(values = c("blue", "steelblue", "orange", "red")) +
theme_minimal() +
labs(x = "Value", y = "Count", title = "Histograms by Variable and Phenotype") +
theme(legend.position = "top")
print(p)
cGroups <- compareGroups(phenotype ~ ., data = d0)
results <- createTable(cGroups, hide.no = "none", show.all = TRUE)  # Adjust parameters as needed
export2md(results)
}
# variables %in% names(selected)
dat <- plot_data
#dat[, 3:6] <- lapply(dat[, 3:6], factor)
html(describe(dat),
size=80,
rows=30,
cols=80,
rmarkdown=T,
width="80%")
eda(dat)
high_risk_indices <- which(bl$converted == 1)
high_risk_data <- selected[high_risk_indices, ]
selected$ml_highrisk <- 0
selected$ml_highrisk[high_risk_indices] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "converted"
plot_data <- rbind(selected, mlhr)
d0 <- plot_data[,c(1,3:25)]
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "converted"))
d0 <- d0 %>% filter(phenotype != "chr")
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
#d00 <- d00[!(d00$phenotype == "chr" & d00$converted == 0), ]
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
cGroups <- compareGroups(phenotype ~ ., data = d0)
results <- createTable(cGroups, hide.no = "none", show.all = TRUE)  # Adjust parameters as needed
export2md(results)
p <- ggplot(data = d0_long, aes(x = value, fill = phenotype)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 30) +
facet_wrap(~variable, scales = "free") +
scale_fill_manual(values = c("blue", "steelblue", "red")) +
theme_minimal() +
labs(x = "Value", y = "Count", title = "Histograms by Variable and Phenotype") +
theme(legend.position = "top")
p
selected <- bl %>% select(phenotype,
sips_p_total,
sips_n_total,
sips_d_total,
sips_g_total,
gaf_score_current,gaf_score_1yrago,gfs_current,gfs_low,gfs_high,
gfr_current,gfr_low,gfr_high,
nsipr_avolition,nsipr_asociality,nsipr_anhedonia,nsipr_blunted_affect,
nsipr_alogia, nsipr_ee, nsipr_map,
ends_with("_rating"),
napls_rc_1yr, napls_rc_2yr, sharp_sips_rc
)
selected[, 32:34] <- lapply(selected[, 32:34], as.numeric)
# Create a new column in the 'selected' data frame
selected$ml_highrisk <- 0
# Set 'high_risk' to 1 for the top 20% of subjects with the highest risk
high_risk_indices <- which(predicted_probabilities >= optimal_cutoff2)
selected$ml_highrisk[high_risk_indices] <- 1
table(selected$ml_highrisk)
selected$ml_highrisk[high_risk_indices] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "mlhr"
plot_data <- rbind(selected, mlhr)
dat <- plot_data[,1:34]
html(describe(dat),
size=80,
rows=30,
cols=80,
rmarkdown=T,
width="80%")
eda(dat)
plot_data <- rbind(selected, mlhr) %>% select(-c(phenotype1,converted))
plot_data <- rbind(selected, mlhr) %>% select(-c("phenotype1","converted"))
plot_data <- rbind(selected, mlhr) %>% select(-c("converted"))
plot_data <- rbind(selected, mlhr)
# variables %in% names(selected)
dat <- plot_data
View(dat)
# variables %in% names(selected)
dat <- plot_data %>% select(-ml_highrisk)
html(describe(dat),
size=80,
rows=30,
cols=80,
rmarkdown=T,
width="80%")
eda(dat)
high_risk_indices <- which(bl$converted == 1)
high_risk_data <- selected[high_risk_indices, ]
selected$ml_highrisk <- 0
selected$ml_highrisk[high_risk_indices] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "converted"
plot_data <- rbind(selected, mlhr)
View(plot_data)
plot_data <- rbind(selected, mlhr) %>% select(-ml_highrisk)
d0 <- plot_data[,c(1,3:25)]
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "converted"))
d0 <- d0 %>% filter(phenotype != "chr")
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
#d00 <- d00[!(d00$phenotype == "chr" & d00$converted == 0), ]
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
cGroups <- compareGroups(phenotype ~ ., data = d0)
results <- createTable(cGroups, hide.no = "none", show.all = TRUE)  # Adjust parameters as needed
export2md(results)
p <- ggplot(data = d0_long, aes(x = value, fill = phenotype)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 30) +
facet_wrap(~variable, scales = "free") +
scale_fill_manual(values = c("blue", "steelblue", "red")) +
theme_minimal() +
labs(x = "Value", y = "Count", title = "Histograms by Variable and Phenotype") +
theme(legend.position = "top")
p
selected <- bl %>% select(phenotype,
sips_p_total,
sips_n_total,
sips_d_total,
sips_g_total,
gaf_score_current,gaf_score_1yrago,gfs_current,gfs_low,gfs_high,
gfr_current,gfr_low,gfr_high,
nsipr_avolition,nsipr_asociality,nsipr_anhedonia,nsipr_blunted_affect,
nsipr_alogia, nsipr_ee, nsipr_map,
ends_with("_rating"),
napls_rc_1yr, napls_rc_2yr, sharp_sips_rc
)
selected[, 32:34] <- lapply(selected[, 32:34], as.numeric)
# Create a new column in the 'selected' data frame
selected$ml_highrisk <- 0
# Set 'high_risk' to 1 for the top 20% of subjects with the highest risk
high_risk_indices <- which(predicted_probabilities >= optimal_cutoff2)
selected$ml_highrisk[high_risk_indices] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "mlhr"
plot_data <- rbind(selected, mlhr)
dat <- plot_data[,1:34]
View(dat)
selected <- bl %>% select(phenotype, converted,
sips_p_total,
sips_n_total,
sips_d_total,
sips_g_total,
gaf_score_current,gaf_score_1yrago,gfs_current,gfs_low,gfs_high,
gfr_current,gfr_low,gfr_high,
nsipr_avolition,nsipr_asociality,nsipr_anhedonia,nsipr_blunted_affect,
nsipr_alogia, nsipr_ee, nsipr_map,
ends_with("_rating"),
napls_rc_1yr, napls_rc_2yr, sharp_sips_rc
)
selected[, 33:35] <- lapply(selected[, 33:35], as.numeric)
# Create a new column in the 'selected' data frame
selected$ml_highrisk <- 0
# Set 'high_risk' to 1 for the top 20% of subjects with the highest risk
selected$ml_highrisk[bl$converted == 1] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "converted"
plot_data <- rbind(selected, mlhr)
d0 <- plot_data[,c(1:35)]
View(d0)
View(plot_data)
d0 <- plot_data[,c(3:35)]
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "converted"))
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d0 <- plot_data[,c(1,3:35)]
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "converted"))
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
#d00 <- d00[!(d00$phenotype == "chr" & d00$converted == 0), ]
d00 <- d00[,-1]
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
p <- ggplot(data = d0_long, aes(x = phenotype, y = value)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free")
p
p
selected <- bl %>% select(phenotype, converted,
sips_p_total,
sips_n_total,
sips_d_total,
sips_g_total,
gaf_score_current,gaf_score_1yrago,gfs_current,gfs_low,gfs_high,
gfr_current,gfr_low,gfr_high,
nsipr_avolition,nsipr_asociality,nsipr_anhedonia,nsipr_blunted_affect,
nsipr_alogia, nsipr_ee, nsipr_map,
ends_with("_rating"),
napls_rc_1yr, napls_rc_2yr, sharp_sips_rc
)
selected[, 33:35] <- lapply(selected[, 33:35], as.numeric)
# Create a new column in the 'selected' data frame
selected$ml_highrisk <- 0
# Set 'high_risk' to 1 for the top 20% of subjects with the highest risk
selected$ml_highrisk[bl$converted == 1] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "converted"
plot_data <- rbind(selected, mlhr)
d0 <- plot_data[,c(1,3:35)]
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "converted"))
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
#d00 <- d00[!(d00$phenotype == "chr" & d00$converted == 0), ]
d00 <- d00[,-1]
d0_long <- pivot_longer(d00, cols = 1:(ncol(d00) - 1), names_to = "variable", values_to = "value")
p <- ggplot(data = d0_long, aes(x = value, fill = phenotype)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 30) +
facet_wrap(~variable, scales = "free") +
scale_fill_manual(values = c("blue", "steelblue", "red")) +
theme_minimal() +
labs(x = "Value", y = "Count") +
theme(legend.position = "top")
p
View(d0_long)
View(d0_long)
selected <- bl %>% select(phenotype,
sips_p_total,
sips_n_total,
sips_d_total,
sips_g_total,
gaf_score_current,gaf_score_1yrago,gfs_current,gfs_low,gfs_high,
gfr_current,gfr_low,gfr_high,
nsipr_avolition,nsipr_asociality,nsipr_anhedonia,nsipr_blunted_affect,
nsipr_alogia, nsipr_ee, nsipr_map,
ends_with("_rating"),
napls_rc_1yr, napls_rc_2yr, sharp_sips_rc
)
View(selected)
selected[, 32:34] <- lapply(selected[, 32:34], as.numeric)
# Create a new column in the 'selected' data frame
selected$ml_highrisk <- 0
a <- cbind(selected, bl$converted)
View(a)
selected <- bl %>% select(phenotype, converted,
sips_p_total,
sips_n_total,
sips_d_total,
sips_g_total,
gaf_score_current,gaf_score_1yrago,gfs_current,gfs_low,gfs_high,
gfr_current,gfr_low,gfr_high,
nsipr_avolition,nsipr_asociality,nsipr_anhedonia,nsipr_blunted_affect,
nsipr_alogia, nsipr_ee, nsipr_map,
ends_with("_rating"),
napls_rc_1yr, napls_rc_2yr, sharp_sips_rc
)
selected[, 33:35] <- lapply(selected[, 33:35], as.numeric)
# Create a new column in the 'selected' data frame
selected$ml_highrisk <- 0
# Set 'high_risk' to 1 for the top 20% of subjects with the highest risk
selected$ml_highrisk[bl$converted == 1] <- 1
mlhr <- selected[selected$ml_highrisk == 1,]
mlhr$phenotype <- "converted"
plot_data <- rbind(selected, mlhr)
d0 <- plot_data[,c(1,3:35)]
d0$phenotype <- factor(d0$phenotype, levels = c("hc", "hsc", "chr", "converted"))
# boxplots - group comparison
numeric_columns <- sapply(d0, is.numeric)
d00 <- d0[, numeric_columns]
d00 <- d00[, colSums(d00 != 0, na.rm = TRUE) != 0]
d00$phenotype <- d0$phenotype
View(d00)
View(bl)
###########################################################
##################### simulated data ######################
###########################################################
setwd("~/Dropbox/2024_03_SCFA_package/JSS/CLEANED/results/SIMULATED_DATA")
library(ICONS)
library(tidyverse)
library(microbenchmark)
library(psych)
library(lavaan)
library(igraph)
library(kernlab)
library(cluster)
data(sim)
sim <- scale(sim)
matrix <- cor(sim)
matrix_wodiag <- matrix - diag(diag(matrix))
plotMatrix(matrix_wodiag,
save.image = T,
filepath = "orig.png",
format = "png",
cex.axis = 2, cex.lab = 2)
install.packages("POET")
library(POET)
library(glasso)
?PreEst.2014Banerjee
??PreEst.2014Banerjee
library(CovTools)
install.packages("CovTools")
library(CovTools)
library(CovTools)
library(CovTools)
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
devtools::check()
devtools::document()
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
devtools::check()
# update version and track changes in NEWS.md
usethis::use_version()
# build package into zip files
devtools::build()
