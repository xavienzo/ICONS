pretty(at.col.min:at.col.max, 5)
pretty(10*at.col.min: 10*at.col.max, 5)/10
pretty((10*at.col.min): (10*at.col.max), 5)/10
at.col <- seq(at.col.min, at.col.max, length.out = 4)
seq(-0.1, 0.3, length.out = 5)
seq(-0.1, 0.4, length.out = 5)
seq(-0.1, 0.5, length.out = 5)
seq(-0.1, 0.6, length.out = 5)
(at.col.max - at.col.min) %% 2
(at.col.max - at.col.min)
(at.col.max - at.col.min) %% 5
devtools::load_all()
data(sim)
data <- sim
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
# build package into zip files
devtools::build()
SIGMA_U_MLE_OFF <- cov(t(XT_cent)) - L_SIGMAF_LT
XT_cent <- XT - matrix(rep(XT_mean, n), p, n, byrow = FALSE)
# remove.packages("ICONS")
# setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
# devtools::load_all()
load("~/Dropbox/2024_03_SCFA_package/JSS/results/sim_dense.RData")
CID <- results$CID
Clist <- results$Clist
data <- sim
# parameters
k0 <- length(CID)
k <- k0 - 1
n <- nrow(data)
CID_temp <- CID[-k0]
clist_in <- get_index(1:k, CID, Clist)[[1]]
p <- length(clist_in)
p0 <- ncol(data)
L <- matrix(0, p, k)
indices <- rep(1:k, CID_temp)
L[cbind(1:p, indices)] <- 1
X <- data[, clist_in]
X0 <- data[, Clist]
XT <- t(X)
XT_mean <- apply(XT, 1, mean)
XT_cent <- XT - matrix(rep(XT_mean, n), p, n, byrow = FALSE)
F_HAT <- solve(t(L) %*% L) %*% (t(L) %*% XT_cent)
FT_HAT <- t(F_HAT)
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::load_all()
clist_in <- get_index(1:k, CID, Clist)[[1]]
p <- length(clist_in)
p0 <- ncol(data)
L <- matrix(0, p, k)
indices <- rep(1:k, CID_temp)
L[cbind(1:p, indices)] <- 1
X <- data[, clist_in]
X0 <- data[, Clist]
XT <- t(X)
XT_mean <- apply(XT, 1, mean)
XT_cent <- XT - matrix(rep(XT_mean, n), p, n, byrow = FALSE)
F_HAT <- solve(t(L) %*% L) %*% (t(L) %*% XT_cent)
FT_HAT <- t(F_HAT)
SIGMA_F <- cov(FT_HAT)
L_SIGMAF_LT <- L %*% SIGMA_F %*% t(L)
U <- X - FT_HAT %*% t(L)
SIGMA_U <- diag(diag(cov(U)))
SIGMA_U_OFF <- cov(U)
SIGMA_U_MLE_OFF <- cov(t(XT_cent)) - L_SIGMAF_LT
plotMatrix(SIGMA_U_MLE_OFF)
SIGMA_U_MLE <- diag(diag(SIGMA_U_MLE_OFF))
plotMatrix(SIGMA_U_MLE)
diag(SIGMA_U_OFF) <- 0
F_HAT_NEW <- solve(t(L) %*% solve(SIGMA_U) %*% L) %*% t(L) %*% solve(SIGMA_U) %*% XT_cent
F_HAT_NEW_OFF <- solve(t(L) %*% solve(SIGMA_U_OFF) %*% L) %*% t(L) %*% solve(SIGMA_U_OFF) %*% XT_cent
F_HAT_MLE <- solve(t(L) %*% solve(SIGMA_U_MLE) %*% L) %*% t(L) %*% solve(SIGMA_U_MLE) %*% XT_cent
F_HAT_MLE_OFF <- solve(t(L) %*% solve(SIGMA_U_MLE_OFF) %*% L) %*% t(L) %*% solve(SIGMA_U_MLE_OFF) %*% XT_cent
diag(SIGMA_U_MLE_OFF) <- 0
F_HAT_MLE_OFF <- solve(t(L) %*% solve(SIGMA_U_MLE_OFF) %*% L) %*% t(L) %*% solve(SIGMA_U_MLE_OFF) %*% XT_cent
dev.new()
plotMatrix(cov(t(F_HAT_NEW)))
plotMatrix(cov(t(F_HAT_MLE)))
plotMatrix(cov(t(F_HAT_NEW)))
plotMatrix(cov(t(F_HAT_MLE)))
plotMatrix(cov(t(F_HAT_NEW)))
plotMatrix(cov(t(F_HAT_MLE)))
plotMatrix(cov(t(F_HAT_NEW)))
plotMatrix(cov(t(F_HAT_MLE)))
plotMatrix(cov(t(F_HAT_NEW)))
plotMatrix(cov(t(F_HAT_MLE)))
plotMatrix(cov(t(F_HAT_NEW_OFF)))
plotMatrix(cov(t(F_HAT_MLE_OFF)))
par(mfrow = c(2, 2))
plotMatrix(cov(t(F_HAT_NEW)))
plotMatrix(cov(t(F_HAT_MLE)))
plotMatrix(cov(t(F_HAT_NEW_OFF)))
plotMatrix(cov(t(F_HAT_MLE_OFF)))
par(mfrow = c(1, 1))
plotMatrix(cov(X))
# par(mfrow = c(2, 2))
plotMatrix(cov(t(F_HAT_NEW)))
plotMatrix(cov(t(F_HAT_MLE)))
library(ICONS)
data(sim)
matrix <- cor(sim)
results <- dense(W_original = matrix, threshold = 0, lambda = 0)
plotMatrix(results$W_dense)
results <- dense(W_original = matrix, threshold = 1, lambda = 0)
plotMatrix(results$W_dense)
results <- dense(W_original = matrix, threshold = 0, lambda = 0.5)
plotMatrix(results$W_dense)
results <- dense(W_original = matrix, threshold = 0, lambda = 0.2)
plotMatrix(results$W_dense)
results <- dense(W_original = matrix, threshold = 0, lambda = 0.1)
plotMatrix(results$W_dense)
results$CID
results <- dense(W_original = matrix, threshold = 0, lambda = 1)
plotMatrix(results$W_dense)
library(data.table)
data <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/data/ADNIdemo.csv")
matrix <- cor(data)
View(data)
a
data <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/results/methods/Methods_demo_orig.csv")
results <- dense(W_original = data, threshold = 0.5, lambda = 0.2)
View(data)
data <- as.matrix(data)
results <- dense(W_original = data, threshold = 0.5, lambda = 0.2)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.5, lambda = 0.1)
plotMatrix(results$W_dense)
dev.off()
results <- dense(W_original = data, threshold = 0.1, lambda = 0.1)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.5)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.3)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.4)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.7)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.9)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.1, lambda = 1.0)
plotMatrix(results$W_dense)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.4)
plotMatrix(results$W_dense,
save.image = T,
format = "eps",
filepath = "/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/figure/lambda_small.eps",
cex.axis = 1.5, cex.lab = 1.5)
remove.packages("ICONS")
devtools::install_github("xavienzo/ICONS")
library(ICONS)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.4)
plotMatrix(results$W_dense,
save.image = T,
format = "eps",
filepath = "/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/figure/lambda_small.eps",
cex.axis = 1.5, cex.lab = 1.5)
library(ICONS)
remove.packages("ICONS")
devtools::install_github("xavienzo/ICONS")
library(ICONS)
library(data.table)
data <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/results/methods/Methods_demo_orig.csv")
data <- as.matrix(data)
results <- dense(W_original = data, threshold = 0.1, lambda = 0.4)
plotMatrix(results$W_dense,
save.image = T,
format = "eps",
filepath = "/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/figure/lambda_small.eps",
cex.axis = 1.5, cex.lab = 1.5)
# Set seed for reproducibility
set.seed(123)
# Define the number of variables
n_variables <- 200
n_cluster_a <- 50
n_cluster_b <- 30
# Total observations (rows)
n_obs <- 500
# Create a covariance matrix for Cluster A (highly correlated variables)
rho_a <- 0.9 # High correlation within Cluster A
cov_a <- matrix(rho_a, n_cluster_a, n_cluster_a)
diag(cov_a) <- 1 # Set diagonal to 1
# Create a covariance matrix for Cluster B (highly correlated variables)
rho_b <- 0.9 # High correlation within Cluster B
cov_b <- matrix(rho_b, n_cluster_b, n_cluster_b)
diag(cov_b) <- 1 # Set diagonal to 1
# Create correlation between Cluster A and Cluster B
cross_correlation <- matrix(0.4, n_cluster_a, n_cluster_b)
# Combine the clusters into a block covariance matrix
top <- cbind(cov_a, cross_correlation)
bottom <- cbind(t(cross_correlation), cov_b)
block_covariance <- rbind(top, bottom)
# Add remaining uncorrelated variables
remaining_vars <- n_variables - (n_cluster_a + n_cluster_b)
identity_cov <- diag(remaining_vars) # Uncorrelated variables
final_covariance <- bdiag(block_covariance, identity_cov)
library(MASS)
library(Matrix)
final_covariance <- bdiag(block_covariance, identity_cov)
# Convert to a regular matrix
final_covariance <- as.matrix(final_covariance)
# Generate data from the multivariate normal distribution
library(MASS)
simulated_data <- mvrnorm(n = n_obs, mu = rep(0, n_variables), Sigma = final_covariance)
# Convert to data frame and assign column names
simulated_df <- as.data.frame(simulated_data)
colnames(simulated_df) <- paste0("V", 1:n_variables)
# Print first few rows of the dataset
head(simulated_df)
cormat <- cor(simulated_df)
plotMatrix(cormat)
# Create a covariance matrix for Cluster B (highly correlated variables)
rho_b <- 0.55 # High correlation within Cluster B
# Create a covariance matrix for Cluster B (highly correlated variables)
rho_b <- 0.55 # High correlation within Cluster B
# Define the number of variables
n_variables <- 200
n_cluster_a <- 50
n_cluster_b <- 30
# Total observations (rows)
n_obs <- 500
# Create a covariance matrix for Cluster A (highly correlated variables)
rho_a <- 0.6 # High correlation within Cluster A
cov_a <- matrix(rho_a, n_cluster_a, n_cluster_a)
diag(cov_a) <- 1 # Set diagonal to 1
# Create a covariance matrix for Cluster B (highly correlated variables)
rho_b <- 0.55 # High correlation within Cluster B
cov_b <- matrix(rho_b, n_cluster_b, n_cluster_b)
diag(cov_b) <- 1 # Set diagonal to 1
# Create correlation between Cluster A and Cluster B
cross_correlation <- matrix(0.4, n_cluster_a, n_cluster_b)
# Combine the clusters into a block covariance matrix
top <- cbind(cov_a, cross_correlation)
bottom <- cbind(t(cross_correlation), cov_b)
block_covariance <- rbind(top, bottom)
# Add remaining uncorrelated variables
remaining_vars <- n_variables - (n_cluster_a + n_cluster_b)
identity_cov <- diag(remaining_vars) # Uncorrelated variables
final_covariance <- bdiag(block_covariance, identity_cov)
# Convert to a regular matrix
final_covariance <- as.matrix(final_covariance)
# Generate data from the multivariate normal distribution
library(MASS)
simulated_data <- mvrnorm(n = n_obs, mu = rep(0, n_variables), Sigma = final_covariance)
# Convert to data frame and assign column names
simulated_df <- as.data.frame(simulated_data)
colnames(simulated_df) <- paste0("V", 1:n_variables)
# Print first few rows of the dataset
head(simulated_df)
cormat <- cor(simulated_df)
plotMatrix(cormat)
library(Matrix)
# Set seed for reproducibility
set.seed(123)
# Define the number of variables
n_variables <- 200
n_cluster_a <- 50
n_cluster_b <- 30
# Total observations (rows)
n_obs <- 500
# Create a covariance matrix for Cluster A (highly correlated variables)
rho_a <- 0.6 # High correlation within Cluster A
cov_a <- matrix(rho_a, n_cluster_a, n_cluster_a)
diag(cov_a) <- 1 # Set diagonal to 1
# Create a covariance matrix for Cluster B (highly correlated variables)
rho_b <- 0.55 # High correlation within Cluster B
cov_b <- matrix(rho_b, n_cluster_b, n_cluster_b)
diag(cov_b) <- 1 # Set diagonal to 1
# Create correlation between Cluster A and Cluster B
cross_correlation <- matrix(-0.4, n_cluster_a, n_cluster_b)
# Combine the clusters into a block covariance matrix
top <- cbind(cov_a, cross_correlation)
bottom <- cbind(t(cross_correlation), cov_b)
block_covariance <- rbind(top, bottom)
# Add remaining uncorrelated variables
remaining_vars <- n_variables - (n_cluster_a + n_cluster_b)
identity_cov <- diag(remaining_vars) # Uncorrelated variables
final_covariance <- bdiag(block_covariance, identity_cov)
# Convert to a regular matrix
final_covariance <- as.matrix(final_covariance)
# Generate data from the multivariate normal distribution
library(MASS)
simulated_data <- mvrnorm(n = n_obs, mu = rep(0, n_variables), Sigma = final_covariance)
# Convert to data frame and assign column names
simulated_df <- as.data.frame(simulated_data)
colnames(simulated_df) <- paste0("V", 1:n_variables)
# Print first few rows of the dataset
head(simulated_df)
cormat <- cor(simulated_df)
plotMatrix(cormat)
results <- dense(W_original = cormat, threshold = 0, lambda = 0.1)
plotMatrix(results$W_dense)
results <- dense(W_original = cormat, threshold = 0, lambda = 0.2)
plotMatrix(results$W_dense)
# Set seed for reproducibility
set.seed(123)
# Define the number of variables
n_variables <- 200
n_cluster_a <- 50
n_cluster_b <- 30
# Total observations (rows)
n_obs <- 500
# Create a covariance matrix for Cluster A (highly correlated variables)
rho_a <- 0.9 # High correlation within Cluster A
cov_a <- matrix(rho_a, n_cluster_a, n_cluster_a)
diag(cov_a) <- 1 # Set diagonal to 1
# Create a covariance matrix for Cluster B (highly correlated variables)
rho_b <- 0.9 # High correlation within Cluster B
cov_b <- matrix(rho_b, n_cluster_b, n_cluster_b)
diag(cov_b) <- 1 # Set diagonal to 1
# Create correlation between Cluster A and Cluster B
cross_correlation <- matrix(0.4, n_cluster_a, n_cluster_b)
# Combine the clusters into a block covariance matrix
top <- cbind(cov_a, cross_correlation)
bottom <- cbind(t(cross_correlation), cov_b)
block_covariance <- rbind(top, bottom)
# Add remaining uncorrelated variables with increased noise (higher variance)
remaining_vars <- n_variables - (n_cluster_a + n_cluster_b)
identity_cov <- diag(remaining_vars) * 10  # Increase the variance of uncorrelated variables
# Create final covariance matrix by combining everything
final_covariance <- cbind(rbind(block_covariance, rep(0, n_cluster_a + n_cluster_b)),
matrix(0, n_cluster_a + n_cluster_b, remaining_vars))
data <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/data/for demo/HCP_beta_t_p_reduced_MMP.csv")
View(data)
squareform <- function(v) {
n <- floor(sqrt(2 * length(v) + 0.25) - 0.5)
mat <- matrix(0, nrow = n, ncol = n)
mat[lower.tri(mat, diag = FALSE)] <- v
mat <- mat + t(mat)
return(mat)
}
View(data)
data <- squareform(data[,3])
data <- squareform(data[[3]])
View(data)
plotMatrix(data)
data <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/data/for demo/HCP_beta_t_p_reduced_MMP.csv")
View(data)
data <- squareform(as.vector(data[,3]))
v <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/data/for demo/HCP_beta_t_p_reduced_MMP.csv")
squareform <- function(v) {
n <- floor(sqrt(2 * length(v) + 0.25) - 0.5)
mat <- matrix(0, nrow = n, ncol = n)
mat[lower.tri(mat, diag = FALSE)] <- v
mat <- mat + t(mat)
return(mat)
}
sqrt(length(v) * 2)
v <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/data/for demo/MMP_pmat.csv")
plotMatrix(v)
plotMatrix(as.matrix(v))
View(v)
v <- scale(v)
plotMatrix(as.matrix(v))
scale_to_range <- function(x, min_val = -1, max_val = 1) {
# Perform min-max scaling
scaled_x <- min_val + (x - min(x)) * (max_val - min_val) / (max(x) - min(x))
return(scaled_x)
}
v <- fread("/Users/xavienzo/Dropbox/2024_03_SCFA_package/JSS/data/for demo/MMP_pmat.csv")
scaled_v <- scale_to_range(v)
plotMatrix(as.matrix(scaled_v))
results <- dense(W_original = scaled_v, threshold = 0.5, lambda = 0.5)
results <- dense(W_original = as.matrix(scaled_v), threshold = 0.5, lambda = 0.5)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(scaled_v), threshold = 0.1, lambda = 0.5)
plotMatrix(results$W_dense)
results$CID
results <- dense(W_original = as.matrix(scaled_v), threshold = 0.1, lambda = 0.4)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(scaled_v), threshold = 0.1, lambda = 0.2)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(scaled_v), threshold = 0.1, lambda = 0.1.)
results <- dense(W_original = as.matrix(scaled_v), threshold = 0.1, lambda = 0.1)
plotMatrix(results$W_dense)
r
results <- dense(W_original = as.matrix(v), threshold = 0.5, lambda = 0.5)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(v), threshold = 0.5, lambda = 0.2)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(v), threshold = 0.5, lambda = 0.8)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(v), threshold = 0.5, lambda = 0.9)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(v), threshold = 0.5, lambda = 1.0)
plotMatrix(results$W_dense)
results <- dense(W_original = as.matrix(v), threshold = 0.5, lambda = 0.7)
plotMatrix(results$W_dense)
detrended_prices <- read.csv("/Users/biostat05/Dropbox/2024_03_SCFA_package/JSS/data/sp400_201501_06_data.csv")
detrended_prices <- read.csv("~/Dropbox/2024_03_SCFA_package/JSS/data/sp400_201501_06_data.csv")
sp400_cor <- cor(detrended_prices)
prctile_vec <- seq(94, 99, by = 0.5)
lambda_vec <- seq(0.5, 0.8, length.out = 4)
sp400_tune <- param_tuning_sigmau(sp400_cor, detrended_prices, prctile_vec, lambda_vec)
sp400_dense <- dense(sp400_cor, sp400_tune$cut_out, sp400_tune$lambda_out)
plotMatrix(sp400_dense$W_dense)
sp400_dense$CID
length(sp400_dense$CID)
get_index(5:53, sp400_dense$CID, sp400_dense$Clist)
block2_idx <- get_index(5:53, sp400_dense$CID, sp400_dense$Clist)[[1]]
new_cormat <- sp400_cor[block2_idx, block2_idx]
new_sp400 <- detrended_prices[, block2_idx]
plotMatrix(new_cormat)
sp400_tune2 <- param_tuning_sigmau(new_cormat, new_sp400, prctile_vec, lambda_vec)
sp400_dense2 <- dense(new_cormat, sp400_tune2$cut_out, sp400_tune2$lambda_out)
plotMatrix(sp400_dense2$W_dense)
sp400_tune2$cut_out
sp400_tune2$lambda_out
sp400_dense2 <- dense(new_cormat, sp400_tune2$cut_out, 0.6)
plotMatrix(sp400_dense2$W_dense)
sp400_dense2 <- dense(new_cormat, sp400_tune2$cut_out, 0.7)
plotMatrix(sp400_dense2$W_dense)
require(Hmisc)
knitrSet(lang='markdown', h=4.5, fig.path='png/', fig.align='left')  # + sometimes ,cache=TRUE
# knitrSet redirects all messages to messages.txt
options(grType='plotly') # for certain graphics functions
mu <- markupSpecs$html   # markupSpecs is in Hmisc
cap  <- mu$cap           # function to output html caption
lcap <- mu$lcap          # for continuation for long caption
# These last 2 functions are used by the putHfig function in Hmisc
require(rms)
require(ggplot2)
require(Rmisc)
# require(nlme)
library(lme4)
library(lmerTest)
library(broom.mixed)
# require(reshape2)
# require(effsize)
library(tidyverse)
library(xlsx)
library(tidyr)
library(knitr)
library(kableExtra)
library(gt)
# Main Data
randcode <- read.xlsx("~/Dropbox/2024_11_MPRC_TrypNAC/543 Randomization Unblind 2024-11-25.xlsx", sheetIndex = 1)
# Main Data
randcode <- read.xlsx("~/Dropbox/2024_11_MPRC_TrypNAC/543 Randomization Unblind 2024-11-25.xlsx", sheetIndex = 1)
raw <- read.xlsx("~/Dropbox/2024_11_MPRC_TrypNAC/Project 4 final individual data 12-6-24.xlsx", sheetIndex = 1, rowIndex = 3:61, colIndex = 1:19)
# Clean data
randcode <- randcode[!(randcode$Recno %in% c(1037, 10)), ] ### remove duplicates
raw[, 3:19] <- lapply(raw[, 3:19], as.numeric)
colnames(raw)[2] <- "MPRCID"
raw$MPRCID[raw$MPRCID == "M085835"] <- "M085836"
day1 <- raw[, c(2:6, 12:15)]
day2 <- raw[, c(2, 7:10, 16:19)]
colnames(day1) <- c("MPRCID", paste0("kynurenine", 0:3), paste0("KYNA", 0:3))
colnames(day2) <- c("MPRCID", paste0("kynurenine", 0:3), paste0("KYNA", 0:3))
randcode$MPRCID <- toupper(randcode$MPRCID)
day1randcode <- randcode[, c(4,9)]
day2randcode <- randcode[, c(4,10)]
day1_code <- left_join(day1, day1randcode, "MPRCID")
day2_code <- left_join(day2, day2randcode, "MPRCID")
day1_code_long <- day1_code %>%
pivot_longer(
cols = starts_with("kynurenine") | starts_with("KYNA"),
names_to = c("metabolite"),
values_to = "response"
)
day1_code_long$assessment <- as.factor(substr(day1_code_long$metabolite, nchar(day1_code_long$metabolite), nchar(day1_code_long$metabolite)))
day1_code_long$metabolite <- substr(day1_code_long$metabolite, 1, nchar(day1_code_long$metabolite) - 1)
colnames(day1_code_long)[2] <- "treatment"
day1_code_long$phase <- "day1"
day2_code_long <- day2_code %>%
pivot_longer(
cols = starts_with("kynurenine") | starts_with("KYNA"),
names_to = c("metabolite"),
values_to = "response"
)
day2_code_long$assessment <- as.numeric(substr(day2_code_long$metabolite, nchar(day2_code_long$metabolite), nchar(day2_code_long$metabolite)))
day2_code_long$metabolite <- substr(day2_code_long$metabolite, 1, nchar(day2_code_long$metabolite) - 1)
colnames(day2_code_long)[2] <- "treatment"
day2_code_long$phase <- "day2"
data <- rbind(day1_code_long, day2_code_long)
data_kynu <- data %>% filter(metabolite == "kynurenine")
data_kyna <- data %>% filter(metabolite == "KYNA")
View(data)
#remove outliers
data <- data %>% filter(MPRCID != "M095130")
data <- rbind(day1_code_long, day2_code_long)
#remove outliers
data <- data %>% filter(MPRCID != "M095130")
data_kynu <- data %>% filter(metabolite == "kynurenine")
data_kyna <- data %>% filter(metabolite == "KYNA")
missing_summary <- data %>% group_by(metabolite, assessment) %>% summarise(n_missing = sum(is.na(response)))
ggplot(missing_summary, aes(x = assessment, y = metabolite, fill = n_missing)) +
geom_tile(color = "gray80", size = 0.5) +
geom_text(aes(label = n_missing), color = "black", size = 8) +
scale_fill_gradient(low = "yellow", high = "purple", name = "Missing Count") +
labs(
title = "Missingness Heatmap",
x = "Assessment",
y = "Metabolite"
) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
d1 = describe(day1)
Hmisc::html(d1, size=80, rows=30, cols=80, rmarkdown=T, width="80%")
View(data)
data <- rbind(day1_code_long, day2_code_long)
View(data)
