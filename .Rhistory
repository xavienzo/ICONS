# update version and track changes in NEWS.md
usethis::use_version()
# build package into zip files
devtools::build()
######
load("data/TCGA_Pan_ncrna_gene_clinical_processed.RData")
######
load("~/Dropbox/2024_03_SCFA_package/JSS/data/TCGA_Pan_ncrna_gene_clinical_processed.RData")
z = cor(ncrna)
x <- seq(ncol(z))
y <- seq(nrow(z))
zlim <- range(z)
# color_palette <- colorRampPalette(c("blue", "cyan", "yellow", "red"))(256)
color_palette <- colorRampPalette(c("blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))(256)
color_legend <- data.frame("color" = color_palette,
"value" = seq(from = min(z, na.rm = T), to = max(z, na.rm = T), along.with = 1:256))
graphics::image(x = x,
y = y,
z = t(z[nrow(z):1, ]),
zlim = c(zlim[1], zlim[2]),
axes = FALSE,
ann = FALSE,
col  = color_palette,
...)
# Handle xy-axis ticks
axp.x <- if ("xaxp" %in% names(list(...))) {
list(...)[["xaxp"]]  # Use custom x-axis parameters if provided
} else {
par("xaxp")  # Otherwise, use default parameters
}
axp.x <- par("xaxp")
at.x <- pretty(axp.x[1]:axp.x[2], axp.x[3])  # Generate pretty tick marks
axis(1, at.x)  # Draw x-axis with pretty ticks
graphics::image(x = x,
y = y,
z = t(z[nrow(z):1, ]),
zlim = c(zlim[1], zlim[2]),
axes = FALSE,
ann = FALSE,
col  = color_palette)
axp.x <- par("xaxp")
at.x <- pretty(axp.x[1]:axp.x[2], axp.x[3])  # Generate pretty tick marks
axis(1, at.x)  # Draw x-axis with pretty ticks
at.y = at.x
at.y.r <- max(at.y) - at.y + 1
at.y.r <- max(zlim[2]) - at.y + 1
zlim[2]
zlim
at.y.r <- max(ncol(z)) - at.y + 1
ncol(z)
devtools::load_all()
devtools::document()
plotMatrix(z)
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
devtools::check()
# build package into zip files
devtools::build()
devtools::load_all()
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
matrix <- cor(data)
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
devtools::document()
devtools::load_all()
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
prctile_vec = seq(94, 99, by = 0.5)
lam_vec = seq(0.4, 0.8, length.out = 5)
res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
results <- dense(W_original = matrix, threshold = res$cut_out, lambda = res$lambda_out)
plotMatrix(results$W_dense)
z = matrix
# Create a jet-like palette
color_palette <- colorRampPalette(c("blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))(256)
color_legend <- data.frame("color" = color_palette,
"value" = seq(from = zlim[1], to = zlim[2], along.with = 1:256))
# Define values for plotting
x <- seq(ncol(z))
y <- seq(nrow(z))
zlim <- range(z)
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 5)
color_legend <- data.frame("color" = color_palette,
"value" = seq(from = zlim[1], to = zlim[2], along.with = 1:256))
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 5)
axis(side = 4, at = at.color, labels = at.color, las = 2, lwd = 0, line = -.75)
View(color_legend)
range(color_legend$value)
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 5)
?pretty
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 5, min.n = 2)
at.color <- c(min(color_legend$value), at.color[at.color > min(color_legend$value) & at.color < max(color_legend$value)], max(color_legend$value))
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 5, min.n = 2)
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 5, bounds = T)
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 3, bounds = T)
# Flexible color bar axis labels
at.color <- pretty(range(color_legend$value), n = 3, bounds = T)
range(color_legend$value)
zlim
# Flexible color bar axis labels
at.color <- pretty(zlim[1]:zlim[2], n = 3, bounds = T)
# Flexible color bar axis labels
at.color <- pretty(zlim[1]:zlim[2], n = 2)
# Flexible color bar axis labels
at.color <- pretty(zlim[1]:zlim[2], n = 5)
par(yaxp = c(min(color_legend$value), max(color_legend$value), 4))
at.color <- par(yaxp = c(min(color_legend$value), max(color_legend$value), 4))
View(at.color)
devtools::load_all()
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense)
axp.col <- par(yaxp = c(min(color_legend$value), max(color_legend$value), 4))
axp.col[1]
axp.col[[1]]
axp.col <- par(yaxp = c(min(color_legend$value), max(color_legend$value), 4))[[1]]
at.col <- pretty(axp.col[1]:axp.col[2], axp.col[3])
axp.col <- par(yaxp = c(zlim[1], zlim[2], 4))[[1]]
at.col <- pretty(axp.col[1]:axp.col[2], axp.col[3])
axp.col
at.col <- pretty(axp.col[1]:axp.col[2], axp.col[3])
at.col
pretty(-0.6550435:1, 4)
pretty(-0.65:1, 4)
at.col <- pretty(zlim[1]:zlim[2], 4)
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty(zlim[1]:zlim[2], 4)
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
at.col <- pretty(zlim[1]:zlim[2], 2)
at.col <- pretty(zlim[1]:zlim[2], 7)
at.col <- pretty(zlim[1]:zlim[2], 10)
at.col <- pretty(zlim[2]:zlim[1], 4)
at.col <- pretty(c(zlim[1], zlim[2]), 4)
at.col <- pretty(seq(zlim[1], zlim[2], .01), 4)
seq(zlim[1], zlim[2], .001)
at.col <- pretty(seq(zlim[1], zlim[2], .001), 4)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 4)/10
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
10*zlim[1]
10*zlim[2]
at.col <- pretty((100*zlim[1]):(100*zlim[2]), 5)/100
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 10)/10
at.col
zlim[1]
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty(c(zlim[1], zlim[2]), 4)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
dev.off()
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
plotMatrix <- function(z,
filepath = file.path(getwd(), "plot.tiff"),
save.image = F,
width = 2500,
height = 2350,
res = 300,
format = "tiff",
...) {
# Sanity check
if (!is.matrix(z)) {
stop("Input must be a matrix.")
}
if (!is.numeric(z)) {
stop("Data must be numeric.")
}
# Define values for plotting
x <- seq(ncol(z))
y <- seq(nrow(z))
zlim <- range(z)
if(save.image){
# Start the appropriate graphics device
switch(tolower(format),
"tiff" = tiff(filename = filepath, width = width, height = height, res = res, compression = "lzw"),
"png" = png(filename = filepath, width = width, height = height, res = res),
"jpeg" = jpeg(filename = filepath, width = width, height = height, res = res),
"svg" = svg(filename = filepath, width = width, height = height),
stop("Unsupported file format. Use 'tiff', 'png', 'jpeg', or 'svg'.")
)
}
# Create a jet-like palette
color_palette <- colorRampPalette(c("blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))(256)
color_legend <- data.frame("color" = color_palette,
"value" = seq(from = zlim[1], to = zlim[2], along.with = 1:256))
# Main plot
layout(matrix(c(1, 2), nrow = 1), widths = c(8, 1))
par(mar = c(5, 4, 4, 1) + 0.1, ...)
image(x = x,
y = y,
z = t(z[nrow(z):1, ]),
zlim = c(zlim[1], zlim[2]),
axes = FALSE,
ann = FALSE,
col  = color_palette,
...)
# Handle xy-axis ticks
axp.x <- if ("xaxp" %in% names(list(...))) {
list(...)[["xaxp"]]  # Use custom x-axis parameters if provided
} else {
par("xaxp")  # Otherwise, use default parameters
}
at.x <- pretty(axp.x[1]:axp.x[2], axp.x[3])  # Generate pretty tick marks
axis(1, at.x)  # Draw x-axis with pretty ticks
axp.y <- if ("yaxp" %in% names(list(...))) {
list(...)[["yaxp"]]
} else {
par("yaxp")
}
at.y <- pretty(axp.y[1]:axp.y[2], axp.y[3])
at.y.r <- max(ncol(z)) - at.y + 1
axis(2, at.y.r, labels = at.y, las = 1)
box()
# Add the legend
par(mar = c(5, 0, 4, 3))
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
box()
invisible(NULL)
if(save.image){
dev.off()
cat("Figure has been saved to:", normalizePath(filepath), "\n")
}
}
devtools::load_all()
rm(list = c("plotMatrix"))
devtools::load_all()
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10 - 0.01
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
axis(side = 4, at.col-0.01, lwd = 0, las = 2, line = -.75)
dev.off()
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
plotMatrix <- function(z,
filepath = file.path(getwd(), "plot.tiff"),
save.image = F,
width = 2500,
height = 2350,
res = 300,
format = "tiff",
...) {
# Sanity check
if (!is.matrix(z)) {
stop("Input must be a matrix.")
}
if (!is.numeric(z)) {
stop("Data must be numeric.")
}
# Define values for plotting
x <- seq(ncol(z))
y <- seq(nrow(z))
zlim <- range(z)
if(save.image){
# Start the appropriate graphics device
switch(tolower(format),
"tiff" = tiff(filename = filepath, width = width, height = height, res = res, compression = "lzw"),
"png" = png(filename = filepath, width = width, height = height, res = res),
"jpeg" = jpeg(filename = filepath, width = width, height = height, res = res),
"svg" = svg(filename = filepath, width = width, height = height),
stop("Unsupported file format. Use 'tiff', 'png', 'jpeg', or 'svg'.")
)
}
# Create a jet-like palette
color_palette <- colorRampPalette(c("blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))(256)
color_legend <- data.frame("color" = color_palette,
"value" = seq(from = zlim[1], to = zlim[2], along.with = 1:256))
# Main plot
layout(matrix(c(1, 2), nrow = 1), widths = c(8, 1))
par(mar = c(5, 4, 4, 1) + 0.1, ...)
image(x = x,
y = y,
z = t(z[nrow(z):1, ]),
zlim = c(zlim[1], zlim[2]),
axes = FALSE,
ann = FALSE,
col  = color_palette,
...)
# Handle xy-axis ticks
axp.x <- if ("xaxp" %in% names(list(...))) {
list(...)[["xaxp"]]  # Use custom x-axis parameters if provided
} else {
par("xaxp")  # Otherwise, use default parameters
}
at.x <- pretty(axp.x[1]:axp.x[2], axp.x[3])  # Generate pretty tick marks
axis(1, at.x)  # Draw x-axis with pretty ticks
axp.y <- if ("yaxp" %in% names(list(...))) {
list(...)[["yaxp"]]
} else {
par("yaxp")
}
at.y <- pretty(axp.y[1]:axp.y[2], axp.y[3])
at.y.r <- max(ncol(z)) - at.y + 1
axis(2, at.y.r, labels = at.y, las = 1)
box()
# Add the legend
par(mar = c(5, 0, 4, 3))
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- pretty((10*zlim[1]):(10*zlim[2]), 5)/10
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
box()
invisible(NULL)
if(save.image){
dev.off()
cat("Figure has been saved to:", normalizePath(filepath), "\n")
}
}
v <- c(zlim[1]:zlim[2])
zlim[2]
seq(zlim[1]:zlim[2], length.out = 4)
seq(zlim[1], zlim[2], length.out = 4)
ceiling(seq(zlim[1], zlim[2], length.out = 4))
ceiling((seq(zlim[1], zlim[2], length.out = 4)) * 10)/10
ceiling((seq(zlim[1], zlim[2], length.out = 5)) * 10)/10
dev.off()
plot(x = rep(1,length(color_legend$value)),
y = color_legend$value,
xlim = c(0,1),
col = color_legend$color,
type = "n", xaxs = "i", yaxs = "i",
ann = FALSE, axes = FALSE)
segments(x0 = 0, x1 = 1,
y0 = color_legend$value, y1 = color_legend$value,
col = color_legend$color, lwd = 5)
at.col <- ceiling((seq(zlim[1], zlim[2], length.out = 5)) * 10)/10
axis(side = 4, at.col, lwd = 0, las = 2, line = -.75)
box()
devtools::load_all()
rm(list = c("plotMatrix"))
devtools::load_all()
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
range(results$W_dense)
ceiling((seq(-0.6550435, 0.8825354, length.out = 5)) * 10)/10
at.col <- seq(zlim[1], zlim[2], length.out = 5)
at.col.r <- ceiling(at.col * 10)/10
at.col.r[which.max(at.col)] <- floor(max(at.col) * 10) / 10
devtools::load_all()
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
at.col <- seq(zlim[1], zlim[2], length.out = 5)
at.col
devtools::load_all()
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
at.col.min <- ceiling(zlim[1] * 10) / 10  # Round up to nearest 0.1
at.col.max <- floor(zlim[2] * 10) / 10      # Round down to nearest 0.1
at.col <- seq(at.col.min, at.col.max, length.out = 5)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
devtools::load_all()
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
# build package into zip files
devtools::build()
pretty(at.col.min:at.col.max, 5)
pretty(10*at.col.min: 10*at.col.max, 5)/10
pretty((10*at.col.min): (10*at.col.max), 5)/10
at.col <- seq(at.col.min, at.col.max, length.out = 4)
seq(-0.1, 0.3, length.out = 5)
seq(-0.1, 0.4, length.out = 5)
seq(-0.1, 0.5, length.out = 5)
seq(-0.1, 0.6, length.out = 5)
(at.col.max - at.col.min) %% 2
(at.col.max - at.col.min)
(at.col.max - at.col.min) %% 5
devtools::load_all()
data(sim)
data <- sim
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
plotMatrix(results$W_dense, cex.axis = 1.5, cex.lab = 1.5)
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
# build package into zip files
devtools::build()
