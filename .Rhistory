return(list(indices = final_indices, block_ids = final_block_ids))
}
?get_index
idx_refine <- get_index(1:2, CID, Clist)
idx_refine <- get_index(1:2, CID, Clist)[[1]]
View(idx_refine)
# safeguard for input like 1:2
blockid <- as.numeric(blockid)
blockid = 1:2
# safeguard for input like 1:2
blockid <- as.numeric(blockid)
get_index <- function(blockid, CID, Clist){
# safeguard for input like 1:2
blockid <- as.numeric(blockid)
# Calculate start and end positions for each block based on CID
start_pos <- cumsum(c(0, head(CID, -1))) + 1 # Start positions for each block
end_pos <- cumsum(CID) # End positions for each block
# Create a vector of logicals to identify valid blockids
valid_blockids <- blockid[blockid <= length(CID) & blockid >= 1]
if (length(valid_blockids) != length(blockid)) {
stop("One or more block IDs are out of range.")
}
# Get the start and end indices for each block in blockid
block_indices <- mapply(function(start, end) Clist[start:end],
start_pos[valid_blockids], end_pos[valid_blockids])
# Flatten the list of indices into a single vector
final_indices <- unlist(block_indices)
# Repeat the block ID for the length of each block's indices
final_block_ids <- rep(valid_blockids, times = CID[valid_blockids])
return(list(indices = final_indices, block_ids = final_block_ids))
}
idx_refine <- get_index(1:2, CID, Clist)[[1]]
View(idx_refine)
idx_refine <- get_index(1:3, CID, Clist)[[1]]
get_index <- function(blockid, CID, Clist){
# safeguard for input like 1:2
blockid <- as.numeric(blockid)
# Calculate start and end positions for each block based on CID
start_pos <- cumsum(c(0, head(CID, -1))) + 1 # Start positions for each block
end_pos <- cumsum(CID) # End positions for each block
# Create a vector of logicals to identify valid blockids
valid_blockids <- blockid[blockid <= length(CID) & blockid >= 1]
if (length(valid_blockids) != length(blockid)) {
stop("One or more block IDs are out of range.")
}
# Get the start and end indices for each block in blockid
block_indices <- mapply(function(start, end) Clist[start:end],
start_pos[valid_blockids], end_pos[valid_blockids])
# Flatten the list of indices into a single vector
final_indices <- as.vector(unlist(block_indices))
# Repeat the block ID for the length of each block's indices
final_block_ids <- rep(valid_blockids, times = CID[valid_blockids])
return(list(indices = final_indices, block_ids = final_block_ids))
}
idx_refine <- get_index(1:2, CID, Clist)[[1]]
plotMatrix(mat_refine, filepath = "~/Dropbox/2024_03_SCFA_package/refine.tiff", format = "tiff", palette = "jet")
mat_refine <- matrix[idx_refine, idx_refine]
plotMatrix(mat_refine, filepath = "~/Dropbox/2024_03_SCFA_package/refine.tiff", format = "tiff", palette = "jet")
idx_refine <- get_index(c(1,3), CID, Clist)[[1]]
mat_refine <- matrix[idx_refine, idx_refine]
plotMatrix(mat_refine, filepath = "~/Dropbox/2024_03_SCFA_package/refine.tiff", format = "tiff", palette = "jet")
idx_refine <- get_index(1:2, CID, Clist)[[1]]
mat_refine <- matrix[idx_refine, idx_refine]
plotMatrix(mat_refine, filepath = "~/Dropbox/2024_03_SCFA_package/refine.tiff", format = "tiff", palette = "jet")
?dense
?param_tuning_sigmau
blockid
length(CID)
setdiff(length(CID), blockid)
idx_preserve <- get_index(setdiff(blockid, 1:length(CID)), CID, Clist)[[1]]
setdiff(blockid, 1:length(CID))
idx_preserve <- get_index(setdiff(1:length(CID), blockid), CID, Clist)[[1]]
setdiff(1:length(CID), blockid)
idx_preserve <- get_index(setdiff(1:length(CID), blockid), CID, Clist)[[1]]
idx_reorder <- c(idx_preserve, idx_refine_reorder)
W_dense_refined <- W_original[idx_reorder, idx_reorder]
blockid[end]
blockid[length(blockid])]
blockid[length(blockid)]
CID[blockid[1]]
blockid[1]-1
CID[blockid[1]-1]
blockid = 2:3
CID[blockid[1]-1]
idx <- (CID[blockid[1]-1] + 1) : (cumsum(CID[blockid[length(blockid)]))
(cumsum(CID[blockid[length(blockid)]))
idx <- (CID[blockid[1]-1] + 1) : cumsum(CID[blockid[length(blockid)]])
(CID[blockid[1]-1] + 1)
idx <- (CID[blockid[1]-1] + 1) : cumsum(CID[1:blockid[length(blockid)]])
CID[1:blockid[length(blockid)]]
cumsum(CID[1:blockid[length(blockid)]])
sum(CID[1:blockid[length(blockid)]])
idx <- (CID[blockid[1]-1] + 1) : sum(CID[1:blockid[length(blockid)]])
blockid = 1:2
idx_replace <- (CID[blockid[1]-1] + 1) : sum(CID[1:blockid[length(blockid)]])
idx_replace <- (CID[blockid[1]-1] + 1) : sum(CID[1:blockid[length(blockid)]])
(CID[blockid[1]-1] + 1)
blockid = 1:2
blockid[1]
CID[blockid[1]-1]
CID[blockid[1]-1] + 1
as.numeric(CID[blockid[1]-1])
as.numeric(CID[blockid[1]-1]) + 1
idx_replace_start <- ifelse(length(as.numeric(CID[blockid[1] - 1])) == 0, 1, as.numeric(CID[blockid[1] - 1]) + 1)
idx_replace <- idx_replace_start : sum(CID[1:blockid[length(blockid)]])
idx_replace_end <- sum(CID[1:blockid[length(blockid)]])
Clist[1:idx_replace_start]
cumsum(c(0, head(CID, -1))) + 1
cumsum(CID)
cumsum(CID)[blockid[1]]
blockid = 2:3
cumsum(CID)[blockid[1]]
cumsum(CID)[blockid[1]-1]
blockid = 3:5
cumsum(c(0, head(CID, -1)))[blockid[length(blockid)]] + 1
blockid[length(blockid)]
cumsum(c(0, head(CID, -1)))
cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1
(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)
idx_full <- ifelse(blockid[1] == 1,
c(idx_refine_reorder, idx_preserve),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder, Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)])
)
Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]
blockid = 2:3
Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]
Clist
dense_refine <- function(W_original, blockid, CID, Clist,
threshold = 0.5, lambda = 0.5,
param_tuning = F, ...){
# Index of the original matrix that needs refinement
idx_refine <- get_index(blockid, CID, Clist)[[1]]
idx_preserve <- get_index(setdiff(1:length(CID), blockid), CID, Clist)[[1]]
# Matrix that needs refinement
W_refine <- W_original[idx_refine, idx_refine]
# Apply dense algorithm on the new matrix
if (param_tuning) {   # Apply parameter tuning function if indicated
tuning_params <- list(...)
working_params <- param_tuning_sigmau(W_refine, data, prctile_vec, lam_vec)
threshold <- working_params$cut_out
lambda <- working_params$lambda_out
}
working_results <- dense(W_refine, threshold, lambda)
# Dense index order by original matrix index
W_dense_refine <- working_results$W_dense
idx_refine_reorder <- idx_refine[working_results$Clist]
# Insert the refined dense submatrix back into the original matrix
W_dense_full <- W_original[Clist, Clist]
idx_replace_start <- ifelse(blockid[1] == 1, 1, as.numeric(CID[blockid[1] - 1]) + 1)
idx_replace_end <- sum(CID[1:blockid[length(blockid)]])
idx_replace <- idx_replace_start : idx_replace_end
W_dense_full[idx_replace, idx_replace] <- W_dense_refine
idx_full <- ifelse(blockid[1] == 1,
c(idx_refine_reorder, idx_preserve),
ifelse(blockid[length(blockid)] != length(CID)),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder, Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder)
)
return(list(
W_dense_refine = W_dense_refine,
W_dense_full = W_dense_updated,
idx_refine = idx_refine,
Clist_refine = idx_refine_reorder,
Clist_full = idx_full,
CID_refine = working_results$CID#,
#CID_full =
))
}
dense_refine <- function(matrix, 1:2, CID, Clist,
dense_refine <- function(matrix, c(1,2), CID, Clist,
refinement <- dense_refine( matrix, 1:2, CID, Clist,threshold = 0.5, lambda = 0.5, param_tuning = F)
CID <- results$CID
Clist <- results$Clist
W_dense <- results$W_dense
W_original = matrix
blockid = 1:2
# Index of the original matrix that needs refinement
idx_refine <- get_index(blockid, CID, Clist)[[1]]
idx_preserve <- get_index(setdiff(1:length(CID), blockid), CID, Clist)[[1]]
# Matrix that needs refinement
W_refine <- W_original[idx_refine, idx_refine]
# Apply dense algorithm on the new matrix
if (param_tuning) {   # Apply parameter tuning function if indicated
tuning_params <- list(...)
working_params <- param_tuning_sigmau(W_refine, data, prctile_vec, lam_vec)
threshold <- working_params$cut_out
lambda <- working_params$lambda_out
}
param_tuning = f
param_tuning = F
# Apply dense algorithm on the new matrix
if (param_tuning) {   # Apply parameter tuning function if indicated
tuning_params <- list(...)
working_params <- param_tuning_sigmau(W_refine, data, prctile_vec, lam_vec)
threshold <- working_params$cut_out
lambda <- working_params$lambda_out
}
working_results <- dense(W_refine, threshold, lambda)
threshold = 0.5
lambda = 0.5
working_results <- dense(W_refine, threshold, lambda)
# Dense index order by original matrix index
W_dense_refine <- working_results$W_dense
idx_refine_reorder <- idx_refine[working_results$Clist]
# Insert the refined dense submatrix back into the original matrix
W_dense_full <- W_original[Clist, Clist]
idx_replace_start <- ifelse(blockid[1] == 1, 1, as.numeric(CID[blockid[1] - 1]) + 1)
idx_replace_end <- sum(CID[1:blockid[length(blockid)]])
idx_replace <- idx_replace_start : idx_replace_end
W_dense_full[idx_replace, idx_replace] <- W_dense_refine
idx_full <- ifelse(blockid[1] == 1,
c(idx_refine_reorder, idx_preserve),
ifelse(blockid[length(blockid)] != length(CID)),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder, Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder)
)
idx_full <- ifelse(blockid[1] == 1, c(idx_refine_reorder, idx_preserve),
ifelse(blockid[length(blockid)] != length(CID),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder, Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder)))
idx_refine_reorder
idx_preserve
blockid
blockid[1] == 1
idx_full <- ifelse(blockid[1] == 1, c(idx_refine_reorder, idx_preserve),
ifelse(blockid[length(blockid)] != length(CID),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder, Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]),
c(Clist[1:cumsum(CID)[blockid[1]-1]], idx_refine_reorder)))
idx_full
if (blockid[1] == 1) {
idx_full <- c(idx_refine_reorder, idx_preserve)
} else if (blockid[length(blockid)] != length(CID)) {
# Case where blockid is not at the start or end
idx_full <- c(
Clist[1:cumsum(CID)[blockid[1] - 1]],
idx_refine_reorder,
Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]
)
} else {
# Case where blockid ends with the last block
idx_full <- c(Clist[1:cumsum(CID)[blockid[1] - 1]], idx_refine_reorder)
}
dense_refine <- function(W_original, blockid, CID, Clist,
threshold = 0.5, lambda = 0.5,
param_tuning = F, ...){
# Index of the original matrix that needs refinement
idx_refine <- get_index(blockid, CID, Clist)[[1]]
idx_preserve <- get_index(setdiff(1:length(CID), blockid), CID, Clist)[[1]]
# Matrix that needs refinement
W_refine <- W_original[idx_refine, idx_refine]
# Apply dense algorithm on the new matrix
if (param_tuning) {   # Apply parameter tuning function if indicated
tuning_params <- list(...)
working_params <- param_tuning_sigmau(W_refine, data, prctile_vec, lam_vec)
threshold <- working_params$cut_out
lambda <- working_params$lambda_out
}
working_results <- dense(W_refine, threshold, lambda)
# Dense index order by original matrix index
W_dense_refine <- working_results$W_dense
idx_refine_reorder <- idx_refine[working_results$Clist]
# Insert the refined dense submatrix back into the original matrix
W_dense_full <- W_original[Clist, Clist]
idx_replace_start <- ifelse(blockid[1] == 1, 1, as.numeric(CID[blockid[1] - 1]) + 1)
idx_replace_end <- sum(CID[1:blockid[length(blockid)]])
idx_replace <- idx_replace_start : idx_replace_end
W_dense_full[idx_replace, idx_replace] <- W_dense_refine
if (blockid[1] == 1) {
idx_full <- c(idx_refine_reorder, idx_preserve)
} else if (blockid[length(blockid)] != length(CID)) {
# Case where blockid is not at the start or end
idx_full <- c(
Clist[1:cumsum(CID)[blockid[1] - 1]],
idx_refine_reorder,
Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]
)
} else {
# Case where blockid ends with the last block
idx_full <- c(Clist[1:cumsum(CID)[blockid[1] - 1]], idx_refine_reorder)
}
return(list(
W_dense_refine = W_dense_refine,
W_dense_full = W_dense_updated,
idx_refine = idx_refine,
Clist_refine = idx_refine_reorder,
Clist_full = idx_full,
CID_refine = working_results$CID#,
#CID_full =
))
}
refinement <- dense_refine( matrix, 1:2, CID, Clist,threshold = 0.5, lambda = 0.5, param_tuning = F)
dense_refine <- function(W_original, blockid, CID, Clist,
threshold = 0.5, lambda = 0.5,
param_tuning = F, ...){
# Index of the original matrix that needs refinement
idx_refine <- get_index(blockid, CID, Clist)[[1]]
idx_preserve <- get_index(setdiff(1:length(CID), blockid), CID, Clist)[[1]]
# Matrix that needs refinement
W_refine <- W_original[idx_refine, idx_refine]
# Apply dense algorithm on the new matrix
if (param_tuning) {   # Apply parameter tuning function if indicated
tuning_params <- list(...)
working_params <- param_tuning_sigmau(W_refine, data, prctile_vec, lam_vec)
threshold <- working_params$cut_out
lambda <- working_params$lambda_out
}
working_results <- dense(W_refine, threshold, lambda)
# Dense index order by original matrix index
W_dense_refine <- working_results$W_dense
idx_refine_reorder <- idx_refine[working_results$Clist]
# Insert the refined dense submatrix back into the original matrix
W_dense_full <- W_original[Clist, Clist]
idx_replace_start <- ifelse(blockid[1] == 1, 1, as.numeric(CID[blockid[1] - 1]) + 1)
idx_replace_end <- sum(CID[1:blockid[length(blockid)]])
idx_replace <- idx_replace_start : idx_replace_end
W_dense_full[idx_replace, idx_replace] <- W_dense_refine
if (blockid[1] == 1) {
idx_full <- c(idx_refine_reorder, idx_preserve)
} else if (blockid[length(blockid)] != length(CID)) {
# Case where blockid is not at the start or end
idx_full <- c(
Clist[1:cumsum(CID)[blockid[1] - 1]],
idx_refine_reorder,
Clist[(cumsum(c(0, head(CID, -1)))[blockid[length(blockid)] + 1] + 1) : length(Clist)]
)
} else {
# Case where blockid ends with the last block
idx_full <- c(Clist[1:cumsum(CID)[blockid[1] - 1]], idx_refine_reorder)
}
return(list(
W_dense_refine = W_dense_refine,
W_dense_full = W_dense_full,
idx_refine = idx_refine,
Clist_refine = idx_refine_reorder,
Clist_full = idx_full,
CID_refine = working_results$CID#,
#CID_full =
))
}
refinement <- dense_refine( matrix, 1:2, CID, Clist,threshold = 0.5, lambda = 0.5, param_tuning = F)
plotMatrix(refinement$W_dense_full, filepath = "~/Dropbox/2024_03_SCFA_package/dense_refined.tiff", format = "tiff", palette = "jet")
refinement <- dense_refine( matrix, 1:2, CID, Clist,threshold = 0.5, lambda = 0.5, param_tuning = T)
require(Hmisc)
knitrSet(lang='markdown', h=4.5, fig.path='png/', fig.align='left')  # + sometimes ,cache=TRUE
# knitrSet redirects all messages to messages.txt
options(grType='plotly') # for certain graphics functions
mu <- markupSpecs$html   # markupSpecs is in Hmisc
cap  <- mu$cap           # function to output html caption
lcap <- mu$lcap          # for continuation for long caption
# These last 2 functions are used by the putHfig function in Hmisc
rm(list = ls())
require(rms)
require(rms)
require(ggplot2)
require(Rmisc)
library(tidyverse)
#library(psych)
library(knitr)
library(kableExtra)
require(compareGroups)
library(xlsx)
library(kableExtra)
require(compareGroups)
library(xlsx)
library(mice)
library(mice)
library(pROC)
rm(list = ls())
# Main Data
data <- read.csv("~/Dropbox/2024_06_Jim_PsychosisTraits/small_latent_profile_project_4.19.24.csv")
newdata <- read.xlsx("~/Dropbox/2024_06_Jim_PsychosisTraits/riskcalc_jg_request.xlsx", sheetIndex = 1)
newdata <- newdata %>%
group_by(src_subject_id) %>%
slice(1) %>%
ungroup()
bl <- data %>% filter(visit == "bl") %>% left_join(newdata, "src_subject_id")
# psychosis coversion id
id <- c(20099, 20322, 20209, 20248, 20960, 30498, 30665, 40271, 51018, 51028, 60591)
bl$converted <- ifelse(bl$src_subject_id %in% id, 1, 0)
Sum_Win <- c("Win80_1", "Win80_2", "Win80_3", "Win80_4",
"Win90_1", "Win90_2", "Win90_3", "Win90_4")
bl$pessiglione_totalwin <- rowSums(bl[, Sum_Win], na.rm = TRUE)
Sum_Win <- c("Win80_1", "Win80_2", "Win80_3", "Win80_4",
"Win90_1", "Win90_2", "Win90_3", "Win90_4")
bl$pessiglione_totalwin <- rowSums(bl[, Sum_Win], na.rm = TRUE)
Sum_Loss <- c("LA80_1", "LA80_2", "LA80_3", "LA80_4",
"LA90_1", "LA90_2", "LA90_3", "LA90_4")
bl$pessiglione_totalloss <- rowSums(bl[, Sum_Loss], na.rm = TRUE)
selected <- bl %>% select(phenotype, converted,
auditory_capr_nu, ch_x3_trajectory, auditory_capr_omega2, auditory_capr_omega3,
LrgK01_log10,
High_highest_Mag_HardProp,
iaps_PosPleasant,
context_sensitivity,
inverted_percent_reported,
scrambled_upright_percent_reported_adjusted,
kamin_blocking_score, kamin_control_score,
pessiglione_totalwin, pessiglione_totalloss,
pess_gainvla,
prl_win_switch_rate_total, prl_lose_stay_rate_total,
meantaps_dominant, meantaps_nondominant,
fradj_pre, c_pre, beta_pre)
selected$kamin_blocking_diff <- selected$kamin_blocking_score - selected$kamin_control_score
# Reshape the data for ggplot2
missing_proportion <- colSums(is.na(selected)) / nrow(selected)
# Convert the proportions into a data frame for ggplot2
missing_data_df <- data.frame(Column = names(missing_proportion),
MissingProportion = missing_proportion)
# Plot the proportions using ggplot2
ggplot(missing_data_df, aes(x = reorder(Column, -MissingProportion), y = MissingProportion)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(x = "", y = "Proportion Missing") +
theme_bw() +
coord_flip()
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICON")
devtools::document()
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
devtools::check()
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
devtools::check()
devtools::check()
# update version and track changes in NEWS.md
usethis::use_version()
# build package into zip files
devtools::build()
######
load("data/TCGA_Pan_ncrna_gene_clinical_processed.RData")
######
load("~/Dropbox/2024_03_SCFA_package/JSS/data/TCGA_Pan_ncrna_gene_clinical_processed.RData")
z = cor(ncrna)
x <- seq(ncol(z))
y <- seq(nrow(z))
zlim <- range(z)
# color_palette <- colorRampPalette(c("blue", "cyan", "yellow", "red"))(256)
color_palette <- colorRampPalette(c("blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))(256)
color_legend <- data.frame("color" = color_palette,
"value" = seq(from = min(z, na.rm = T), to = max(z, na.rm = T), along.with = 1:256))
graphics::image(x = x,
y = y,
z = t(z[nrow(z):1, ]),
zlim = c(zlim[1], zlim[2]),
axes = FALSE,
ann = FALSE,
col  = color_palette,
...)
# Handle xy-axis ticks
axp.x <- if ("xaxp" %in% names(list(...))) {
list(...)[["xaxp"]]  # Use custom x-axis parameters if provided
} else {
par("xaxp")  # Otherwise, use default parameters
}
axp.x <- par("xaxp")
at.x <- pretty(axp.x[1]:axp.x[2], axp.x[3])  # Generate pretty tick marks
axis(1, at.x)  # Draw x-axis with pretty ticks
graphics::image(x = x,
y = y,
z = t(z[nrow(z):1, ]),
zlim = c(zlim[1], zlim[2]),
axes = FALSE,
ann = FALSE,
col  = color_palette)
axp.x <- par("xaxp")
at.x <- pretty(axp.x[1]:axp.x[2], axp.x[3])  # Generate pretty tick marks
axis(1, at.x)  # Draw x-axis with pretty ticks
at.y = at.x
at.y.r <- max(at.y) - at.y + 1
at.y.r <- max(zlim[2]) - at.y + 1
zlim[2]
zlim
at.y.r <- max(ncol(z)) - at.y + 1
ncol(z)
devtools::load_all()
devtools::document()
plotMatrix(z)
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/ICONS")
devtools::document()
devtools::check()
# build package into zip files
devtools::build()
devtools::load_all()
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
matrix <- cor(data)
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
# plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
plotMatrix(matrix, cex.axis = 1.5, cex.lab = 1.5)
